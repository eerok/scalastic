package org.elasticsearch.test.integration.search.facet

import org.elasticsearch.index.query._, FilterBuilders._, QueryBuilders._
import org.elasticsearch.action.search._
import java.util.concurrent._
import org.elasticsearch.common.unit._
import org.elasticsearch.search.facet.FacetBuilders._
import org.elasticsearch.search.facet.filter._
import org.elasticsearch.search.facet.histogram._
import org.elasticsearch.search.facet.query._
import org.elasticsearch.search.facet.range._
import org.elasticsearch.search.facet.statistical._
import org.elasticsearch.search.facet.terms._, doubles._,longs._
import org.elasticsearch.search.facet.termsstats._
import scalastic.elasticsearch._

@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])
class SimpleFacetsTests extends IndexerBasedTest {
	
  override def defaultSettings = Map("number_of_shards" -> "%s".format(numberOfShards()), "number_of_replicas" -> "0")

  protected def numberOfShards(): Int = 1

  protected def numberOfNodes(): Int = 1

  protected def numberOfRuns(): Int = 5

  test("testBinaryFacet") {
    indexer.index(indexName, "type1", null, """{"tag": "green"}""")
    indexer.index(indexName, "type1", null, """{"tag": "blue"}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search_prepare(searchType=Some(SearchType.COUNT))
        .setFacets("""{"facet1": {"terms": {"field": "tag"}}}""".getBytes)
        .execute.actionGet
      response.getHits.totalHits should equal (2)
      response.getHits.hits.length should equal (0)
      val facet: TermsFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (2)
      Set("green", "blue") should contain (facet.getEntries.get(0).getTerm.toString)
      facet.getEntries.get(0).getCount should equal (1)
      Set("green", "blue") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
    }
  }

  test("testSearchFilter") {
    indexer.index(indexName, "type1", null, """{"tag": "green"}""")
    indexer.index(indexName, "type1", null, """{"tag": "blue"}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      var response = indexer.search(facets = Seq(termsFacet("facet1").field("tag").size(10)))
      response.getHits.hits.length should equal (2)
      var facet: TermsFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (2)
      Set("green", "blue") should contain (facet.getEntries.get(0).getTerm.toString)
      facet.getEntries.get(0).getCount should equal (1)
      Set("green", "blue") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
      response = indexer.search(filter = Some(termFilter("tag", "blue")), facets = Seq(termsFacet("facet1").field("tag").size(10)))
      response.getHits.hits.length should equal (1)
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (2)
      Set("green", "blue") should contain (facet.getEntries.get(0).getTerm.toString)
      facet.getEntries.get(0).getCount should equal (1)
      Set("green", "blue") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
    }
  }

  test("testFacetsWithSize0") {
    indexer.index(indexName, "type1", null, """{"stag": "111", "lstag": 111, "tag": ["xxx", "yyy"], "ltag": [1000, 2000]}""")
    indexer.index(indexName, "type1", null, """{"stag": "111", "lstag": 111, "tag": ["zzz", "yyy"], "ltag": [3000, 2000]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      var response = indexer.search(size=Some(0), query=termQuery("stag", "111"), facets=Seq(termsFacet("facet1").field("stag").size(10)))
      response.getHits.hits.length should equal (0)
      var facet: TermsFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
      response = indexer.search(searchType=Some(SearchType.QUERY_AND_FETCH), size=Some(0), query=termQuery("stag", "111"), facets=Seq(
        termsFacet("facet1").field("stag").size(10),
        termsFacet("facet2").field("tag").size(10)))
      response.getHits.hits.length should equal (0)
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
    }
  }

  test("testTermsIndexFacet") {
    pending //fixme: failing test
    indexer.createIndex("test1")
    indexer.createIndex("test2")
    indexer.index("test1", "type1", null, """{"stag": "111"}""")
    indexer.index("test1", "type1", null, """{"stag": "111"}""")
    indexer.index("test2", "type1", null, """{"stag": "111"}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(size=Some(0), facets=Seq(termsFacet("facet1").field("_index").size(10)))
      val facet: TermsFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("test1")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(1).getTerm.toString should equal ("test2")
      facet.getEntries.get(1).getCount should equal (1)
    }
    try {
      indexer.deleteIndex(Seq("test1"))
      indexer.deleteIndex(Seq("test2"))
    } catch {
      case e: Exception =>
    }
  }

  test("testFilterFacets") {
    indexer.index(indexName, "type1", null, """{"stag": "111", "tag": ["xxx", "yyy"]}""")
    indexer.index(indexName, "type1", null, """{"stag": "111", "tag": ["zzz", "yyy"]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets=Seq(
        filterFacet("facet1").filter(termFilter("stag", "111")),
        filterFacet("facet2").filter(termFilter("tag", "xxx")),
        filterFacet("facet3").filter(termFilter("tag", "yyy"))))
      val facet: FilterFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getCount should equal (2)
    }
  }

  test("testTermsFacetsMissing") {
    indexer.putMapping(indexName, "type1", """{"type1": {"properties": {"bstag": {"type": "byte"}, "shstag": {"type": "short"}, "istag": {"type": "integer"}, "lstag": {"type": "long"}, "fstag": {"type": "float"}, "dstag": {"type": "double"}}}}""")
    indexer.index(indexName, "type1", null, """{"stag": "111", "bstag": 111, "shtag": 111, "lstag": 111, "fstag": 111.1, "dstag": 111.1}""")
    indexer.index(indexName, "type1", null, """{"kuku": "kuku"}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets = Seq(termsFacet("facet1").field("stag").size(10)))
      val facet: TermsFacet = response.getFacets.facet("facet1")
      facet.getMissingCount should equal (1)
    }
  }

  test("testTermsFacetsNoHint") {
    testTermsFacets(null)
  }

  test("testTermsFacetsMapHint") {
    testTermsFacets("map")
  }

  private def testTermsFacets(executionHint: String) {
    pending //fixme: failing test
    indexer.putMapping(indexName, "type1", """{"type1": {"properties": {"bstag": {"type": "byte"}, "shstag": {"type": "short"}, "istag": {"type": "integer"}, "lstag": {"type": "long"}, "fstag": {"type": "float"}, "dstag": {"type": "double"}}}}""")
    indexer.index(indexName, "type1", null, """{"stag": "111", "bstag": 111, "shtag": 111, "lstag": 111, "fstag": 111.1, "dstag": 111.1, "tag": ["xxx", "yyy"], "ltag": [1000, 2000], "dtag": [1000.1, 2000.1]}""")
    indexer.index(indexName, "type1", null, """{"stag": "111", "bstag": 111, "shtag": 111, "lstag": 111, "fstag": 111.1, "dstag": 111.1, "tag": ["xxx", "yyy"], "ltag": [3000, 2000], "dtag": [3000.1, 2000.1]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      var response = indexer.search(query=termQuery("stag", "111"), facets=Seq(termsFacet("facet1").field("stag").size(10).executionHint(executionHint), termsFacet("facet2").field("tag").size(10).executionHint(executionHint)))
      var facet: TermsFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getTotalCount should equal (2)
      facet.getOtherCount should equal (0)
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
      facet = response.getFacets.facet("facet2")
      facet.getName should equal ("facet2")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (2)
      response = indexer.search(query=termQuery("stag", "111"), facets=Seq(
        termsFacet("facet1").field("lstag").size(10).executionHint(executionHint),
        termsFacet("facet2").field("ltag").size(10).executionHint(executionHint),
        termsFacet("facet3").field("ltag").size(10).exclude(3000.asInstanceOf[Object]).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getClass should equal (classOf[InternalLongTermsFacet])
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
      facet = response.getFacets.facet("facet2")
      facet.getClass should equal (classOf[InternalLongTermsFacet])
      facet.getName should equal ("facet2")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTerm.toString should equal ("2000")
      facet.getEntries.get(0).getCount should equal (2)
      Set("1000", "3000") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
      Set("1000", "3000") should contain (facet.getEntries.get(2).getTerm.toString)
      facet.getEntries.get(2).getCount should equal (1)
      facet = response.getFacets.facet("facet3")
      facet.getClass should equal (classOf[InternalLongTermsFacet])
      facet.getName should equal ("facet3")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("2000")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(1).getTerm.toString should equal ("1000")
      facet.getEntries.get(1).getCount should equal (1)
      response = indexer.search(query=termQuery("stag", "111"), facets=Seq(termsFacet("facet1").field("dstag").size(10).executionHint(executionHint), termsFacet("facet2").field("dtag").size(10).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getClass should equal (classOf[InternalDoubleTermsFacet])
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111.1")
      facet.getEntries.get(0).getCount should equal (2)
      facet = response.getFacets.facet("facet2")
      facet.getClass should equal (classOf[InternalDoubleTermsFacet])
      facet.getName should equal ("facet2")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTerm.toString should equal ("2000.1")
      facet.getEntries.get(0).getCount should equal (2)
      Set("1000.1", "3000.1") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
      Set("1000.1", "3000.1") should contain (facet.getEntries.get(2).getTerm.toString)
      facet.getEntries.get(2).getCount should equal (1)
      response = indexer.search(query = termQuery("stag", "111"), facets = Seq(termsFacet("facet1").field("bstag").size(10).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
      response = indexer.search(query = termQuery("stag", "111"), facets = Seq(termsFacet("facet1").field("istag").size(10).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
      response = indexer.search(query = termQuery("stag", "111"), facets = Seq(termsFacet("facet1").field("shstag").size(10).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("stag").size(10).facetFilter(termFilter("tag","xxx")).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("stag").size(10).facetFilter(termFilter("tag","xxx")).global(true).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("type1.stag").size(10).facetFilter(termFilter("tag","xxx")).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (1)
      response = indexer.search(facets = Seq(termsFacet("facet1").field("tag").size(10).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (2)
      Set("xxx", "yyy") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
      Set("xxx", "yyy") should contain (facet.getEntries.get(2).getTerm.toString)
      facet.getEntries.get(2).getCount should equal (1)
      response = indexer.search(facets = Seq(termsFacet("facet1").field("tag").size(2).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (2)
      Set("xxx", "yyy") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("tag").size(10).exclude("yyy") .executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (2)
      Set("xxx", "zzz") should contain (facet.getEntries.get(0).getTerm.toString)
      facet.getEntries.get(0).getCount should equal (1)
      Set("xxx", "zzz") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("tag").size(10).order(TermsFacet.ComparatorType.TERM) .executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(2).getTerm.toString should equal ("zzz")
      facet.getEntries.get(2).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("tag").size(10).order(TermsFacet.ComparatorType.REVERSE_TERM) .executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(2).getTerm.toString should equal ("xxx")
      facet.getEntries.get(2).getCount should equal (1)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("zzz")
      facet.getEntries.get(0).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("tag").size(10).script("term + param1").param("param1", "a").order(TermsFacet.ComparatorType.TERM).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTerm.toString should equal ("xxxa")
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(1).getTerm.toString should equal ("yyya")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(2).getTerm.toString should equal ("zzza")
      facet.getEntries.get(2).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").field("tag").size(10).script("term == 'xxx' ? false : true").order(TermsFacet.ComparatorType.TERM).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(1).getTerm.toString should equal ("zzz")
      facet.getEntries.get(1).getCount should equal (1)
      response = indexer.search(facets=Seq(termsFacet("facet1").fields("stag", "tag").size(10).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (4)
      Set("111", "yyy") should contain (facet.getEntries.get(0).getTerm.toString)
      facet.getEntries.get(0).getCount should equal (2)
      Set("111", "yyy") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (2)
      Set("zzz", "xxx") should contain (facet.getEntries.get(2).getTerm.toString)
      facet.getEntries.get(2).getCount should equal (1)
      Set("zzz", "xxx") should contain (facet.getEntries.get(3).getTerm.toString)
      facet.getEntries.get(3).getCount should equal (1)
      response = indexer.search(query=termQuery("xxx", "yyy"), facets=Seq(termsFacet("facet1").field("tag").size(10).allTerms(true).executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (3)
      Set("xxx", "yyy", "zzz") should contain (facet.getEntries.get(0).getTerm.toString)
      facet.getEntries.get(0).getCount should equal (0)
      Set("xxx", "yyy", "zzz") should contain (facet.getEntries.get(1).getTerm.toString)
      facet.getEntries.get(1).getCount should equal (0)
      Set("xxx", "yyy", "zzz") should contain (facet.getEntries.get(2).getTerm.toString)
      facet.getEntries.get(2).getCount should equal (0)
      response = indexer.search(facets=Seq(termsFacet("facet1").scriptField("_source.stag").size(10).executionHint(executionHint), termsFacet("facet2").scriptField("_source.tag").size(10)
          .executionHint(executionHint)))
      facet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (1)
      facet.getEntries.get(0).getTerm.toString should equal ("111")
      facet.getEntries.get(0).getCount should equal (2)
      facet = response.getFacets.facet("facet2")
      facet.getName should equal ("facet2")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (2)
    }
  }

  test("testTermFacetWithEqualTermDistribution") {
    for (i <- 0 until 5) indexer.index(indexName, "type1", null, """{"text": "foo bar"}""")
    for (i <- 0 until 5) indexer.index(indexName, "type1", null, """{"text": "bar baz"}""")
    for (i <- 0 until 5) indexer.index(indexName, "type1", null, """{"text": "baz foo"}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets = Seq(termsFacet("facet1").field("text").size(10)))
      val facet: TermsFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (3)
      for (j <- 0 until 3) {
    	  Set("foo", "bar", "baz") should contain (facet.getEntries.get(j).getTerm.toString)
        facet.getEntries.get(j).getCount should equal (10)
      }
    }
  }

  test("testStatsFacets") {
    pending //fixme: failing test
    indexer.index(indexName, "type1", null, """{"num": 1, "multi_num": [1.0, 2.0]}""")
    indexer.index(indexName, "type1", null, """{"num": 1, "multi_num": [3.0, 4.0]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      var response = indexer.search(facets=Seq(
          statisticalFacet("stats1").field("num"), 
          statisticalFacet("stats2").field("multi_num"), 
          statisticalScriptFacet("stats3").script("doc['num'].value * 2")))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      var facet: StatisticalFacet = response.getFacets.facet("stats1")
      facet.getName should equal (facet.getName)
      facet.getCount should equal (2)
      facet.getTotal should equal (3.0)
      facet.getMin should equal (1.0)
      facet.getMax should equal (2.0)
      facet.getMean should equal (1.5d)
      facet.getSumOfSquares should equal (5.0)
      facet = response.getFacets.facet("stats2")
      facet.getName should equal (facet.getName)
      facet.getCount should equal (4)
      facet.getTotal should equal (10.0)
      facet.getMin should equal (1.0)
      facet.getMax should equal (4.0)
      facet.getMean should equal (2.5d)
      facet = response.getFacets.facet("stats3")
      facet.getName should equal (facet.getName)
      facet.getCount should equal (2)
      facet.getTotal should equal (6.0)
      facet.getMin should equal (2.0)
      facet.getMax should equal (4.0)
      facet.getMean should equal (3.0)
      facet.getSumOfSquares should equal (20.0)
      response = indexer.search(facets=Seq(statisticalFacet("stats").fields("num", "multi_num")))
      facet = response.getFacets.facet("stats")
      facet.getName should equal (facet.getName)
      facet.getCount should equal (6)
      facet.getTotal should equal (13.0)
      facet.getMin should equal (1.0)
      facet.getMax should equal (4.0)
      facet.getMean should equal (13d / 6d)
      facet.getSumOfSquares should equal (35.0)
      response = indexer.search(facets = Seq(statisticalFacet("stats").field("num"), statisticalFacet("stats").field("multi_num")))
      facet = response.getFacets.facet("stats")
      facet.getName should equal (facet.getName)
      facet.getCount should equal (6)
      facet.getTotal should equal (13.0)
      facet.getMin should equal (1.0)
      facet.getMax should equal (4.0)
      facet.getMean should equal (13d / 6d)
      facet.getSumOfSquares should equal (35.0)
    }
  }

  test("testHistoFacetEdge") {
    indexer.index(indexName, "type1", null, """{"num": 100}""")
    indexer.index(indexName, "type1", null, """{"num": 200}""")
    indexer.index(indexName, "type1", null, """{"num": 300}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets=Seq(histogramFacet("facet1").field("num").valueField("num").interval(100)))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      val facet: HistogramFacet = response.getFacets.facet("facet1")
      facet.getName should equal ("facet1")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getKey should equal (100)
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(1).getKey should equal (200)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(2).getKey should equal (300)
      facet.getEntries.get(2).getCount should equal (1)
    }
  }

  test("testHistoFacets") {
    pending //fixme: failing test
    indexer.index(indexName, "type1", null, """{"num": 1055, "date": "1970-01-01T00:00:00", "multi_num": [13.0, 23.0]}""")
    indexer.index(indexName, "type1", null, """{"num": 1065, "date": "1970-01-01T00:00:25", "multi_num": [15.0, 31.0]}""")
    indexer.index(indexName, "type1", null, """{"num": 1075, "date": "1970-01-01T00:02:00", "multi_num": [17.0, 25.0]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets=Seq(
        histogramFacet("stats1").field("num").valueField("num").interval(100),
        histogramFacet("stats2").field("multi_num").valueField("multi_num").interval(10),
        histogramFacet("stats3").keyField("num").valueField("multi_num").interval(100),
        histogramScriptFacet("stats4").keyScript("doc['date'].date.minuteOfHour").valueScript("doc['num'].value"),
        histogramFacet("stats5").field("date").interval(1, TimeUnit.MINUTES),
        histogramScriptFacet("stats6").keyField("num").valueScript("doc['num'].value").interval(100),
        histogramFacet("stats7").field("num").interval(100),
        histogramScriptFacet("stats8").keyField("num").valueScript("doc.score").interval(100)
        ))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      var facet: HistogramFacet = null
      facet = response.getFacets.facet("stats1")
      facet.getName should equal ("stats1")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getMin should be (1055d +- 0.000001)
      facet.getEntries.get(0).getMax should be (1065d +- 0.000001)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getTotal should equal (2120.0)
      facet.getEntries.get(0).getMean should equal (1060.0)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getMin should be (1175d +- 0.000001)
      facet.getEntries.get(1).getMax should be (1175d +- 0.000001)
      facet.getEntries.get(1).getTotalCount should equal (1)
      facet.getEntries.get(1).getTotal should equal (1175.0)
      facet.getEntries.get(1).getMean should equal (1175.0)
      facet = response.getFacets.facet("stats2")
      facet.getName should equal ("stats2")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getKey should equal (10)
      facet.getEntries.get(0).getCount should equal (3)
      facet.getEntries.get(0).getTotalCount should equal (3)
      facet.getEntries.get(0).getTotal should equal (45.0)
      facet.getEntries.get(0).getMean should equal (15.0)
      facet.getEntries.get(1).getKey should equal (20)
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotalCount should equal (2)
      facet.getEntries.get(1).getTotal should equal (48.0)
      facet.getEntries.get(1).getMean should equal (24.0)
      facet.getEntries.get(2).getKey should equal (30)
      facet.getEntries.get(2).getCount should equal (1)
      facet.getEntries.get(2).getTotalCount should equal (1)
      facet.getEntries.get(2).getTotal should equal (31.0)
      facet.getEntries.get(2).getMean should equal (31.0)
      facet = response.getFacets.facet("stats3")
      facet.getName should equal ("stats3")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotalCount should equal (4)
      facet.getEntries.get(0).getTotal should equal (82.0)
      facet.getEntries.get(0).getMean should equal (20.5d)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotalCount should equal (2)
      facet.getEntries.get(1).getTotal should equal (42.0)
      facet.getEntries.get(1).getMean should equal (21.0)
      facet = response.getFacets.facet("stats4")
      facet.getName should equal ("stats4")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (0)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getTotal should equal (2120.0)
      facet.getEntries.get(0).getMean should equal (1060.0)
      facet.getEntries.get(1).getKey should equal (2)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotalCount should equal (1)
      facet.getEntries.get(1).getTotal should equal (1175.0)
      facet.getEntries.get(1).getMean should equal (1175.0)
      facet = response.getFacets.facet("stats5")
      facet.getName should equal ("stats5")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (0)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(1).getKey should equal (TimeValue.timeValueMinutes(2).millis())
      facet.getEntries.get(1).getCount should equal (1)
      facet = response.getFacets.facet("stats6")
      facet.getName should equal ("stats6")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getTotal should equal (2120.0)
      facet.getEntries.get(0).getMean should equal (1060.0)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotalCount should equal (1)
      facet.getEntries.get(1).getTotal should equal (1175.0)
      facet.getEntries.get(1).getMean should equal (1175.0)
      facet = response.getFacets.facet("stats7")
      facet.getName should equal ("stats7")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet = response.getFacets.facet("stats8")
      facet.getName should equal ("stats8")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getTotal should equal (2.0)
      facet.getEntries.get(0).getMean should equal (1.0)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotalCount should equal (1)
      facet.getEntries.get(1).getTotal should equal (1.0)
      facet.getEntries.get(1).getMean should equal (1.0)
      facet = response.getFacets.facet("stats9")
      facet.getName should equal ("stats9")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet = response.getFacets.facet("stats10")
      facet.getName should equal ("stats10")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(2).getKey should equal (1200)
      facet.getEntries.get(2).getCount should equal (0)
      facet = response.getFacets.facet("stats11")
      facet.getName should equal ("stats11")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getMin should be (1055d +- 0.000001)
      facet.getEntries.get(0).getMax should be (1065d +- 0.000001)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getTotal should equal (2120.0)
      facet.getEntries.get(0).getMean should equal (1060.0)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getMin should be (1175d +- 0.000001)
      facet.getEntries.get(1).getMax should be (1175d +- 0.000001)
      facet.getEntries.get(1).getTotalCount should equal (1)
      facet.getEntries.get(1).getTotal should equal (1175.0)
      facet.getEntries.get(1).getMean should equal (1175.0)
      facet.getEntries.get(2).getKey should equal (1200)
      facet.getEntries.get(2).getCount should equal (0)
      facet.getEntries.get(2).getTotalCount should equal (0)
      facet = response.getFacets.facet("stats12")
      facet.getName should equal ("stats12")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getMin should be (1055d +- 0.000001)
      facet.getEntries.get(0).getMax should be (1065d +- 0.000001)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getTotal should equal (2120.0)
      facet.getEntries.get(0).getMean should equal (1060.0)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getMin should be (1175d +- 0.000001)
      facet.getEntries.get(1).getMax should be (1175d +- 0.000001)
      facet.getEntries.get(1).getTotalCount should equal (1)
      facet.getEntries.get(1).getTotal should equal (1175.0)
      facet.getEntries.get(1).getMean should equal (1175.0)
      facet.getEntries.get(2).getKey should equal (1200)
      facet.getEntries.get(2).getCount should equal (0)
      facet.getEntries.get(2).getTotalCount should equal (0)
      facet = response.getFacets.facet("stats13")
      facet.getName should equal ("stats13")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
      facet = response.getFacets.facet("stats14")
      facet.getName should equal ("stats14")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getKey should equal (1000)
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(1).getKey should equal (1100)
      facet.getEntries.get(1).getCount should equal (1)
    }
  }

  test("testRangeFacets") {
    pending //fixme: failing test
    indexer.index(indexName, "type1", null, """{"num": 1055, "date": "1970-01-01T00:00:00", "multi_num": [13.0, 23.0], "multi_value": [10, 11]}""")
    indexer.index(indexName, "type1", null, """{"num": 1065, "date": "1970-01-01T00:00:25", "multi_num": [15.0, 31.0], "multi_value": [20, 21]}""")
    indexer.index(indexName, "type1", null, """{"num": 1075, "date": "1970-01-01T00:02:00", "multi_num": [17.0, 25.0], "multi_value": [30, 31]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets=Seq(
    	rangeFacet("range1").field("num").addUnboundedFrom(1056).addRange(1000, 1170).addUnboundedTo(1170),
        rangeFacet("range2").keyField("num").valueField("value").addUnboundedFrom(1056).addRange(1000, 1170).addUnboundedTo(1170),
        rangeFacet("range3").keyField("num").valueField("multi_value").addUnboundedFrom(1056).addRange(1000, 1170).addUnboundedTo(1170),
        rangeFacet("range4").keyField("multi_num").valueField("value").addUnboundedFrom(16).addRange(10, 26).addUnboundedTo(20),
        rangeScriptFacet("range5").keyScript("doc['num'].value").valueScript("doc['value'].value").addUnboundedFrom(1056).addRange(1000, 1170).addUnboundedTo(1170),
        rangeFacet("range6").field("date").addUnboundedFrom("1970-01-01T00:00:26").addRange("1970-01-01T00:00:15", "1970-01-01T00:00:53").addUnboundedTo("1970-01-01T00:00:26")))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      var facet: RangeFacet = response.getFacets.facet("range1")
      facet.getName should equal ("range1")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTo should be (1056.0 +- 0.000001)
      facet.getEntries.get(0).getToAsString.toDouble should be (1056.0 +- 0.000001)
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotalCount should equal (1)
      facet.getEntries.get(0).getTotal should be (1055.0 +- 0.000001)
      facet.getEntries.get(0).getMin should be (1055.0 +- 0.000001)
      facet.getEntries.get(0).getMax should be (1055.0 +- 0.000001)
      facet.getEntries.get(1).getFrom should be (1000.0 +- 0.000001)
      facet.getEntries.get(1).getFromAsString.toDouble should be (1000.0 +- 0.000001)
      facet.getEntries.get(1).getTo should be (1170.0 +- 0.000001)
      facet.getEntries.get(1).getToAsString.toDouble should be (1170.0 +- 0.000001)
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotalCount should equal (2)
      facet.getEntries.get(1).getTotal should be ((1055.0 + 1065.0) +- 0.000001)
      facet.getEntries.get(1).getMin should be (1055.0 +- 0.000001)
      facet.getEntries.get(1).getMax should be (1065.0 +- 0.000001)
      facet.getEntries.get(2).getFrom should be (1170.0 +- 0.000001)
      facet.getEntries.get(2).getCount should equal (1)
      facet.getEntries.get(2).getTotalCount should equal (1)
      facet.getEntries.get(2).getTotal should be (1175.0 +- 0.000001)
      facet.getEntries.get(2).getMin should be (1175.0 +- 0.000001)
      facet.getEntries.get(2).getMax should be (1175.0 +- 0.000001)
      facet = response.getFacets.facet("range2")
      facet.getName should equal ("range2")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTo should be (1056.0 +- 0.000001)
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotal should be (1.0 +- 0.000001)
      facet.getEntries.get(1).getFrom should be (1000.0 +- 0.000001)
      facet.getEntries.get(1).getTo should be (1170.0 +- 0.000001)
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotal should be (3.0 +- 0.000001)
      facet.getEntries.get(2).getFrom should be (1170.0 +- 0.000001)
      facet.getEntries.get(2).getCount should equal (1)
      facet.getEntries.get(2).getTotal should be (3.0 +- 0.000001)
      facet = response.getFacets.facet("range3")
      facet.getName should equal ("range3")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTo should be (1056.0 +- 0.000001)
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getTotal should be ((10.0 + 11.0) +- 0.000001)
      facet.getEntries.get(0).getMin should be (10.0 +- 0.000001)
      facet.getEntries.get(0).getMax should be (11.0 +- 0.000001)
      facet.getEntries.get(1).getFrom should be (1000.0 +- 0.000001)
      facet.getEntries.get(1).getTo should be (1170.0 +- 0.000001)
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotalCount should equal (4)
      facet.getEntries.get(1).getTotal should be (62.0 +- 0.000001)
      facet.getEntries.get(1).getMin should be (10.0 +- 0.000001)
      facet.getEntries.get(1).getMax should be (21.0 +- 0.000001)
      facet.getEntries.get(2).getFrom should be (1170.0 +- 0.000001)
      facet.getEntries.get(2).getCount should equal (1)
      facet.getEntries.get(2).getTotalCount should equal (2)
      facet.getEntries.get(2).getTotal should be (61.0 +- 0.000001)
      facet.getEntries.get(2).getMin should be (30.0 +- 0.000001)
      facet.getEntries.get(2).getMax should be (31.0 +- 0.000001)
      facet = response.getFacets.facet("range4")
      facet.getName should equal ("range4")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTo should be (16.0 +- 0.000001)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (3.0 +- 0.000001)
      facet.getEntries.get(1).getFrom should be (10.0 +- 0.000001)
      facet.getEntries.get(1).getTo should be (26.0 +- 0.000001)
      facet.getEntries.get(1).getCount should equal (3)
      facet.getEntries.get(1).getTotal should be ((1.0 + 2.0 + 3.0) +- 0.000001)
      facet.getEntries.get(2).getFrom should be (20.0 +- 0.000001)
      facet.getEntries.get(2).getCount should equal (3)
      facet.getEntries.get(2).getTotal should be ((1.0 + 2.0 + 3.0) +- 0.000001)
      facet = response.getFacets.facet("range5")
      facet.getName should equal ("range5")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getTo should be (1056.0 +- 0.000001)
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotal should be (1.0 +- 0.000001)
      facet.getEntries.get(1).getFrom should be (1000.0 +- 0.000001)
      facet.getEntries.get(1).getTo should be (1170.0 +- 0.000001)
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotal should be (3.0 +- 0.000001)
      facet.getEntries.get(2).getFrom should be (1170.0 +- 0.000001)
      facet.getEntries.get(2).getCount should equal (1)
      facet.getEntries.get(2).getTotal should be (3.0 +- 0.000001)
      facet = response.getFacets.facet("range6")
      facet.getName should equal ("range6")
      facet.getEntries.size should equal (3)
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getToAsString should equal ("1970-01-01T00:00:26")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getFromAsString should equal ("1970-01-01T00:00:15")
      facet.getEntries.get(1).getToAsString should equal ("1970-01-01T00:00:53")
      facet.getEntries.get(2).getCount should equal (1)
      facet.getEntries.get(2).getFromAsString should equal ("1970-01-01T00:00:26")
    }
  }

  test("testDateHistoFacets") {
    indexer.index(indexName, "type1", null, """{"date": "2009-03-05T01:01:01", "num": 1}""")
    indexer.index(indexName, "type1", null, """{"date": "2009-03-05T04:01:01", "num": 2}""")
    indexer.index(indexName, "type1", null, """{"date": "2009-03-06T01:01:01", "num": 3}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets=Seq(
        dateHistogramFacet("stats1").field("date").interval("day"),
        dateHistogramFacet("stats2").field("date").interval("day").preZone("-02:00"),
        dateHistogramFacet("stats3").field("date").valueField("num").interval("day").preZone("-02:00"),
        dateHistogramFacet("stats4").field("date").valueScript("doc['num'].value * 2").interval("day").preZone("-02:00"),
        dateHistogramFacet("stats5").field("date").interval("24h"),
        dateHistogramFacet("stats6").field("date").valueField("num").interval("day").preZone("-02:00").postZone("-02:00"),
        dateHistogramFacet("stats7").field("date").interval("quarter")))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      //      var facet: DateHistogramFacet = response.getFacets.facet("stats1")
      //      facet.getName should equal ("stats1")
      //      facet.getEntries.size should equal (2)
      //      facet.getEntries.get(0).time() should equal (utcTimeInMillis("2009-03-05"))
      //      facet.getEntries.get(0).getCount should equal (2)
      //      facet.getEntries.get(1).time() should equal (utcTimeInMillis("2009-03-06"))
      //      facet.getEntries.get(1).getCount should equal (1)
      //      facet = response.getFacets.facet("stats2")
      //      facet.getName should equal ("stats2")
      //      facet.getEntries.size should equal (2)
      //      facet.getEntries.get(0).time() should equal (utcTimeInMillis("2009-03-04"))
      //      facet.getEntries.get(0).getCount should equal (1)
      //      facet.getEntries.get(1).time() should equal (utcTimeInMillis("2009-03-05"))
      //      facet.getEntries.get(1).getCount should equal (2)
      //      facet = response.getFacets.facet("stats3")
      //      facet.getName should equal ("stats3")
      //      facet.getEntries.size should equal (2)
      //      facet.getEntries.get(0).time() should equal (utcTimeInMillis("2009-03-04"))
      //      facet.getEntries.get(0).getCount should equal (1)
      //      facet.getEntries.get(0).getTotal should equal (1.0)
      //      facet.getEntries.get(1).time() should equal (utcTimeInMillis("2009-03-05"))
      //      facet.getEntries.get(1).getCount should equal (2)
      //      facet.getEntries.get(1).getTotal should equal (5.0)
      //      facet = response.getFacets.facet("stats4")
      //      facet.getName should equal ("stats4")
      //      facet.getEntries.size should equal (2)
      //      facet.getEntries.get(0).time() should equal (utcTimeInMillis("2009-03-04"))
      //      facet.getEntries.get(0).getCount should equal (1)
      //      facet.getEntries.get(0).getTotal should equal (2.0)
      //      facet.getEntries.get(1).time() should equal (utcTimeInMillis("2009-03-05"))
      //      facet.getEntries.get(1).getCount should equal (2)
      //      facet.getEntries.get(1).getTotal should equal (10.0)
      //      facet = response.getFacets.facet("stats5")
      //      facet.getName should equal ("stats5")
      //      facet.getEntries.size should equal (2)
      //      facet.getEntries.get(0).time() should equal (utcTimeInMillis("2009-03-05"))
      //      facet.getEntries.get(0).getCount should equal (2)
      //      facet.getEntries.get(1).time() should equal (utcTimeInMillis("2009-03-06"))
      //      facet.getEntries.get(1).getCount should equal (1)
      //      facet = response.getFacets.facet("stats6")
      //      facet.getName should equal ("stats6")
      //      facet.getEntries.size should equal (2)
      //      facet.getEntries.get(0).time() should equal (utcTimeInMillis("2009-03-04") - TimeValue.timeValueHours(2).millis())
      //      facet.getEntries.get(0).getCount should equal (1)
      //      facet.getEntries.get(0).getTotal should equal (1.0)
      //      facet.getEntries.get(1).time() should equal (utcTimeInMillis("2009-03-05") - TimeValue.timeValueHours(2).millis())
      //      facet.getEntries.get(1).getCount should equal (2)
      //      facet.getEntries.get(1).getTotal should equal (5.0)
      //      facet = response.getFacets.facet("stats7")
      //      facet.getName should equal ("stats7")
      //      facet.getEntries.size should equal (1)
      //      facet.getEntries.get(0).time() should equal (utcTimeInMillis("2009-01-01"))
    }
  }

  test("testTermsStatsFacets") {
    indexer.index(indexName, "type1", null, """{"field": "xxx", "num": 100.0, "multi_num": [1.0, 2.0]}""")
    indexer.index(indexName, "type1", null, """{"field": "xxx", "num": 200.0, "multi_num": [2.0, 3.0]}""")
    indexer.index(indexName, "type1", null, """{"field": "yyy", "num": 500.0, "multi_num": [5.0, 6.0]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets=Seq(
        termsStatsFacet("stats1").keyField("field").valueField("num"),
        termsStatsFacet("stats2").keyField("field").valueField("multi_num"),
        termsStatsFacet("stats3").keyField("field").valueField("num").order(TermsStatsFacet.ComparatorType.COUNT),
        termsStatsFacet("stats4").keyField("field").valueField("multi_num").order(TermsStatsFacet.ComparatorType.COUNT),
        termsStatsFacet("stats5").keyField("field").valueField("num").order(TermsStatsFacet.ComparatorType.TOTAL),
        termsStatsFacet("stats6").keyField("field").valueField("multi_num").order(TermsStatsFacet.ComparatorType.TOTAL),
        termsStatsFacet("stats7").keyField("field").valueField("num").allTerms(),
        termsStatsFacet("stats8").keyField("field").valueField("multi_num").allTerms(),
        termsStatsFacet("stats9").keyField("field").valueField("num").order(TermsStatsFacet.ComparatorType.COUNT).allTerms(),
        termsStatsFacet("stats10").keyField("field").valueField("multi_num").order(TermsStatsFacet.ComparatorType.COUNT).allTerms(),
        termsStatsFacet("stats11").keyField("field").valueField("num").order(TermsStatsFacet.ComparatorType.TOTAL).allTerms(),
        termsStatsFacet("stats12").keyField("field").valueField("multi_num").order(TermsStatsFacet.ComparatorType.TOTAL).allTerms(),
        termsStatsFacet("stats13").keyField("field").valueScript("doc['num'].value * 2")))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      var facet: TermsStatsFacet = response.getFacets.facet("stats1")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotalCount should equal (2)
      facet.getEntries.get(0).getMin should be (100d +- 0.00001d)
      facet.getEntries.get(0).getMax should be (200d +- 0.00001d)
      facet.getEntries.get(0).getTotal should be (300d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotalCount should equal (1)
      facet.getEntries.get(1).getMin should be (500d +- 0.00001d)
      facet.getEntries.get(1).getMax should be (500d +- 0.00001d)
      facet.getEntries.get(1).getTotal should be (500d +- 0.00001d)
      facet = response.getFacets.facet("stats2")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getMin should be (1d +- 0.00001d)
      facet.getEntries.get(0).getMax should be (3d +- 0.00001d)
      facet.getEntries.get(0).getTotal should be (8d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getMin should be (5d +- 0.00001d)
      facet.getEntries.get(1).getMax should be (6d +- 0.00001d)
      facet.getEntries.get(1).getTotal should be (11d +- 0.00001d)
      facet = response.getFacets.facet("stats3")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (300d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotal should be (500d +- 0.00001d)
      facet = response.getFacets.facet("stats4")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (8d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotal should be (11d +- 0.00001d)
      facet = response.getFacets.facet("stats5")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotal should be (500d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("xxx")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotal should be (300d +- 0.00001d)
      facet = response.getFacets.facet("stats6")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotal should be (11d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("xxx")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotal should be (8d +- 0.00001d)
      facet = response.getFacets.facet("stats7")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (300d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotal should be (500d +- 0.00001d)
      facet = response.getFacets.facet("stats8")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (8d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotal should be (11d +- 0.00001d)
      facet = response.getFacets.facet("stats9")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (300d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotal should be (500d +- 0.00001d)
      facet = response.getFacets.facet("stats10")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (8d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotal should be (11d +- 0.00001d)
      facet = response.getFacets.facet("stats11")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotal should be (500d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("xxx")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotal should be (300d +- 0.00001d)
      facet = response.getFacets.facet("stats12")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("yyy")
      facet.getEntries.get(0).getCount should equal (1)
      facet.getEntries.get(0).getTotal should be (11d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("xxx")
      facet.getEntries.get(1).getCount should equal (2)
      facet.getEntries.get(1).getTotal should be (8d +- 0.00001d)
      facet = response.getFacets.facet("stats13")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("xxx")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getTotal should be (600d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("yyy")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getTotal should be (1000d +- 0.00001d)
    }
  }

  test("testNumericTermsStatsFacets") {
    pending //fixme: failing test
    indexer.index(indexName, "type1", null, """{"lField": 100, "dField": 100.1, "num": 100.0, "multi_num": [1.0, 2.0]}""")
    indexer.index(indexName, "type1", null, """{"lField": 100, "dField": 100.1, "num": 200.0, "multi_num": [2.0, 3.0]}""")
    indexer.index(indexName, "type1", null, """{"lField": 100, "dField": 100.1, "num": 500.0, "multi_num": [5.0, 6.0]}""")
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets = Seq(termsStatsFacet("stats1").keyField("lField").valueField("num"), termsStatsFacet("stats2").keyField("dField").valueField("num")))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      var facet: TermsStatsFacet = response.getFacets.facet("stats1")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("100")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getMin should be (100d +- 0.00001d)
      facet.getEntries.get(0).getMax should be (200d +- 0.00001d)
      facet.getEntries.get(0).getTotal should be (300d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("200")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getMin should be (500d +- 0.00001d)
      facet.getEntries.get(1).getMax should be (500d +- 0.00001d)
      facet.getEntries.get(1).getTotal should be (500d +- 0.00001d)
      facet = response.getFacets.facet("stats2")
      facet.getEntries.size should equal (2)
      facet.getEntries.get(0).getTerm.toString should equal ("100.1")
      facet.getEntries.get(0).getCount should equal (2)
      facet.getEntries.get(0).getMin should be (100d +- 0.00001d)
      facet.getEntries.get(0).getMax should be (200d +- 0.00001d)
      facet.getEntries.get(0).getTotal should be (300d +- 0.00001d)
      facet.getEntries.get(1).getTerm.toString should equal ("200.2")
      facet.getEntries.get(1).getCount should equal (1)
      facet.getEntries.get(1).getMin should be (500d +- 0.00001d)
      facet.getEntries.get(1).getMax should be (500d +- 0.00001d)
      facet.getEntries.get(1).getTotal should be (500d +- 0.00001d)
    }
  }

  test("testTermsStatsFacets2") {
    for (i <- 0 until 20) indexer.index(indexName, "type1", i.toString, """{"num": %s}""".format(i % 10))
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      val response = indexer.search(facets=Seq(
	      termsStatsFacet("stats1").keyField("num").valueScript("doc.score").order(TermsStatsFacet.ComparatorType.COUNT), 
	      termsStatsFacet("stats2").keyField("num").valueScript("doc.score").order(TermsStatsFacet.ComparatorType.TOTAL)))
      if (response.getFailedShards > 0) {
        //logger.warn("Failed shards:")
        for (shardSearchFailure <- response.getShardFailures) {
          //logger.warn("-> {}", shardSearchFailure)
        }
      }
      response.getFailedShards should equal (0)
      var facet: org.elasticsearch.search.facet.termsstats.longs.InternalTermsStatsLongFacet = response.getFacets.facet("stats1")
      facet.getEntries.size should equal (10)
      facet = response.getFacets.facet("stats2")
      facet.getEntries.size should equal (10)
    }
  }

  test("testQueryFacet") {
    for (i <- 0 until 20) indexer.index(indexName, "type1", i.toString, """{"num": %s}""".format(i % 10))
    indexer.refresh()
    for (i <- 0 until numberOfRuns()) {
      var response = indexer.search(facets=Seq(queryFacet("query").query(termQuery("num", 1))))
      var facet: QueryFacet = response.getFacets.facet("query")
      facet.getCount should equal (2)
      response = indexer.search(facets = Seq(queryFacet("query").query(termQuery("num", 1)).global(true)))
      facet = response.getFacets.facet("query")
      facet.getCount should equal (2)
      response = indexer.search(facets=Seq(queryFacet("query").query(termsQuery("num", Array(1d, 2d):_*)).facetFilter(termFilter("num", 1d)).global(true)))
      facet = response.getFacets.facet("query")
      facet.getCount should equal (2)
    }
  }

}
